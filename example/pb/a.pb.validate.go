// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: a.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on A with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *A) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on A with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in AMultiError, or nil if none found.
func (m *A) ValidateAll() error {
	return m.validate(true)
}

func (m *A) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetA() != "" {

		if l := utf8.RuneCountInString(m.GetA()); l < 5 || l > 20 {
			err := AValidationError{
				field:  "A",
				reason: "value length must be between 5 and 20 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !strings.HasPrefix(m.GetA(), "hello") {
			err := AValidationError{
				field:  "A",
				reason: "value does not have prefix \"hello\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !strings.HasSuffix(m.GetA(), "world") {
			err := AValidationError{
				field:  "A",
				reason: "value does not have suffix \"world\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !strings.Contains(m.GetA(), "hello world") {
			err := AValidationError{
				field:  "A",
				reason: "value does not contain substring \"hello world\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetB() != 0 {

		if val := m.GetB(); val <= 3 || val >= 10 {
			err := AValidationError{
				field:  "B",
				reason: "value must be inside range (3, 10)",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetC() != true {
		err := AValidationError{
			field:  "C",
			reason: "value must equal true",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetD()); l < 2 || l > 3 {
		err := AValidationError{
			field:  "D",
			reason: "value must contain between 2 and 3 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_A_D_Unique := make(map[string]struct{}, len(m.GetD()))

	for idx, item := range m.GetD() {
		_, _ = idx, item

		if _, exists := _A_D_Unique[item]; exists {
			err := AValidationError{
				field:  fmt.Sprintf("D[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_A_D_Unique[item] = struct{}{}
		}

	}

	if len(errors) > 0 {
		return AMultiError(errors)
	}

	return nil
}

// AMultiError is an error wrapping multiple validation errors returned by
// A.ValidateAll() if the designated constraints aren't met.
type AMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AMultiError) AllErrors() []error { return m }

// AValidationError is the validation error returned by A.Validate if the
// designated constraints aren't met.
type AValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AValidationError) ErrorName() string { return "AValidationError" }

// Error satisfies the builtin error interface
func (e AValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sA.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AValidationError{}
